apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: rosa-hcp-provision
spec:
  results:
    - name: ocp-login-command
      description: Command to log in to the newly ephemeral OpenShift cluster.
  params:
    - name: ocp-version
      type: string
      description: The version of the OpenShift Container Platform (OCP) to deploy.
    - name: cluster-name
      type: string
      description: The name of the OpenShift cluster to be created.
    - name: machine-type
      type: string
      description: The type of AWS EC2 instance to use for the cluster nodes.
    - name: replicas
      type: string
      description: The number of worker nodes to provision in the cluster.
      default: '3'
    - name: konflux-test-infra-secret
      type: string
      description: The name of secret where testing infrastructures credentials are stored.
    - name: cloud-credential-key
      type: string
      description: The key secret from konflux-test-infra-secret where all AWS ROSA configurations are stored.
  volumes:
    - name: konflux-test-infra-volume
      secret:
        secretName: "$(params.konflux-test-infra-secret)"
  steps:
    - name: provision
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      volumeMounts:
        - name:  konflux-test-infra-volume
          mountPath: /usr/local/konflux-test-infra
      env:
        - name: CLUSTER_NAME
          value: "$(params.cluster-name)"
        - name: OCP_VERSION
          value: "$(params.ocp-version)"
        - name: MACHINE_TYPE
          value: "$(params.machine-type)"
      script: |
        set -o errexit
        set -o nounset
        set -o pipefail
        set -x

        export ROSA_TOKEN AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY BILLING_ACCOUNT_ID AWS_OIDC_CONFIG_ID OPERATOR_ROLES_PREFIX \
              SUBNET_IDS INSTALL_ROLE_ARN SUPPORT_ROLE_ARN WORKER_ROLE_ARN REGION

        ROSA_TOKEN=$(jq -r '.aws["rosa-hcp"]["rosa-token"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        AWS_ACCESS_KEY_ID=$(jq -r '.aws["access-key-id"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        AWS_SECRET_ACCESS_KEY=$(jq -r '.aws["access-key-secret"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        BILLING_ACCOUNT_ID=$(jq -r '.aws["aws-account-id"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        AWS_OIDC_CONFIG_ID=$(jq -r '.aws["rosa-hcp"]["aws-oidc-config-id"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        OPERATOR_ROLES_PREFIX=$(jq -r '.aws["rosa-hcp"]["operator-roles-prefix"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        SUBNET_IDS=$(jq -r '.aws["rosa-hcp"]["subnets-ids"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        INSTALL_ROLE_ARN=$(jq -r '.aws["rosa-hcp"]["install-role-arn"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        SUPPORT_ROLE_ARN=$(jq -r '.aws["rosa-hcp"]["support-role-arn"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        WORKER_ROLE_ARN=$(jq -r '.aws["rosa-hcp"]["worker-role-arn"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        REGION=$(jq -r '.aws["region"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))

        config_aws_creds() {
            printf "INFO: Configure AWS Credentials...\n" 
            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
            aws configure set region "$REGION"
        }

        print_debug_info() {
            printf "INFO: Print debug info......\n" 
            rosa --region "$REGION" describe cluster --cluster="$CLUSTER_NAME"
        }

        # Even the cluster is shown ready on ocm side, and the cluster operators are available, some of the cluster operators are still progressing.
        check_clusteroperators() {
            local STATUS_LOG="co_status.log"
            local max_attempts=10
            local attempt

            echo "[INFO] Checking cluster operators' status..."
            # retrying to get clusteroperator. Makes sense in case master nodes are not ready
            for attempt in $(seq 1 $max_attempts); do
                echo "[INFO] Attempt $attempt/$max_attempts"
                if kubectl get clusteroperators -A > "$STATUS_LOG" 2>&1; then
                    cat "$STATUS_LOG"
                    echo "[INFO] Cluster operators are accessible."
                    break
                fi
                echo "[INFO] Attempt $attempt failed, retrying in 10 seconds..."
                sleep 10
            done

            if [ $attempt -eq $max_attempts ]; then
                echo "[ERROR] All attempts to access cluster operators failed. Check $STATUS_LOG for details."
                cat "$STATUS_LOG"
                return 1
            fi

            echo "[INFO] Waiting for cluster operators to be in 'Progressing=false' state..."
            kubectl wait clusteroperators --all --for=condition=Progressing=false --timeout=60m > "$STATUS_LOG" 2>&1 || true
            cat "$STATUS_LOG"
        }

        get_hcp_full_version() {
            rosa_output=$(rosa list version --channel-group stable --region "$REGION" --hosted-cp -o json)
            raw_id=$(echo "$rosa_output" | jq -r "[.[].raw_id | select(startswith(\"$OCP_VERSION\"))] | max")
            HCP_FULL_VERSION="$raw_id"
            if [ -z "$HCP_FULL_VERSION" ]; then
                echo "Failed to get the HCP full version of $OCP_VERSION" >&2
                exit 1
            fi
        }

        deploy_cluster() {
            printf "INFO: Log in to your Red Hat account...\n" 
            config_aws_creds
            rosa login --token="$ROSA_TOKEN"

            printf "INFO: Create ROSA with HCP cluster...\n" 
            get_hcp_full_version
            rosa create cluster --cluster-name "$CLUSTER_NAME" \
                --sts --mode=auto --oidc-config-id "$AWS_OIDC_CONFIG_ID" \
                --operator-roles-prefix "$OPERATOR_ROLES_PREFIX" --region "$REGION" --version "$HCP_FULL_VERSION" \
                --role-arn "$INSTALL_ROLE_ARN" \
                --support-role-arn "$SUPPORT_ROLE_ARN" \
                --worker-iam-role "$WORKER_ROLE_ARN" \
                --compute-machine-type "$MACHINE_TYPE" \
                --subnet-ids="$SUBNET_IDS" \
                --billing-account "$BILLING_ACCOUNT_ID" \
                --replicas $(params.replicas) \
                --tags konflux-ci:true,creation-date:$(date -u +"%Y-%m-%d"),cluster-type:rosa-hcp \
                --hosted-cp -y

            printf "INFO: Track the progress of the cluster creation...\n" 
            rosa logs install --cluster="$CLUSTER_NAME" --region "$REGION" --watch

            printf "INFO: ROSA with HCP cluster is ready, create a cluster admin account for accessing the cluster\n" 
            admin_output="$(rosa create admin --region "$REGION" --cluster="$CLUSTER_NAME")"

            # Get the admin account credentials and API server URL
            admin_user="$(echo "$admin_output" | grep -oP '(?<=--username ).*(?= --password)')"
            admin_pass="$(echo "$admin_output" | grep -oP '(?<=--password ).*')"
            api_url="$(echo "$admin_output" | grep -oP '(?<=oc login ).*(?= --username)')"

            printf "INFO: Storing login command...\n"
            echo "oc login $api_url --username $admin_user --password $admin_pass" > $(results.ocp-login-command.path)

            # Use the admin account to login to the cluster in a loop until the account is active.
            printf "INFO: Check if it's able to login to OCP cluster...\n"
            max_retries=10
            retries=0
            
            while ! oc login "$api_url" --username "$admin_user" --password "$admin_pass" >/dev/null 2>&1; do
                if [ "$retries" -eq "$max_retries" ]; then
                    echo "ERROR: Failed to login the cluster." >&2
                    print_debug_info
                    exit 1
                fi
                sleep 60
                retries=$((retries + 1))
                echo "Retried $retries times..."
            done

            #Workaround: Check if apiserver is ready by calling kubectl get nodes
            printf "INFO: Check if apiserver is ready...\n"
            if ! timeout 300s bash -c "while ! kubectl get nodes >/dev/null 2>/dev/null; do printf '.'; sleep 10; done"; then
                echo "ERROR: API server is not ready" >&2
                exit 1
            fi
            check_clusteroperators
        }

        deploy_cluster
